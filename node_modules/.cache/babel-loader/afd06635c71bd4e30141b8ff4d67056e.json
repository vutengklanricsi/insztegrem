{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { projectFirestore } from '../firebase/config';\n\nconst useFirestore = collection => {\n  const [docs, setDocs] = useState([]);\n  useEffect(() => {\n    const unsub = projectFirestore.collection(collection).orderBy('createdAt', 'desc').onSnapshot(snap => {\n      //* onsnapshot akkor triggerelődik amikor a collection-ben változás történik\n      let documents = [];\n      console.log(documents);\n      snap.forEach(doc => {\n        documents.push({ ...doc.data(),\n          id: doc.id\n        }); //* egy dokumentum\n      });\n      setDocs(documents);\n    });\n    return () => unsub(); // this is a cleanup function that react will run when\n    // a component using the hook unmounts\n  }, [collection]);\n  return {\n    docs\n  };\n};\n\nexport default useFirestore;","map":{"version":3,"sources":["/home/richard/coding/react/insztegrem/src/hooks/useFirestore.js"],"names":["useState","useEffect","projectFirestore","useFirestore","collection","docs","setDocs","unsub","orderBy","onSnapshot","snap","documents","console","log","forEach","doc","push","data","id"],"mappings":"AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,gBAAT,QAAiC,oBAAjC;;AAEA,MAAMC,YAAY,GAAIC,UAAD,IAAgB;AACnC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMM,KAAK,GAAGL,gBAAgB,CAACE,UAAjB,CAA4BA,UAA5B,EACXI,OADW,CACH,WADG,EACU,MADV,EAEXC,UAFW,CAEAC,IAAI,IAAI;AAClB;AACA,UAAIC,SAAS,GAAG,EAAhB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACAD,MAAAA,IAAI,CAACI,OAAL,CAAaC,GAAG,IAAI;AACvBJ,QAAAA,SAAS,CAACK,IAAV,CAAe,EAAC,GAAGD,GAAG,CAACE,IAAJ,EAAJ;AAAgBC,UAAAA,EAAE,EAAEH,GAAG,CAACG;AAAxB,SAAf,EADuB,CAElB;AACD,OAHD;AAIAZ,MAAAA,OAAO,CAACK,SAAD,CAAP;AACD,KAXW,CAAd;AAaA,WAAO,MAAMJ,KAAK,EAAlB,CAdc,CAed;AACA;AACD,GAjBQ,EAiBN,CAACH,UAAD,CAjBM,CAAT;AAmBA,SAAO;AAAEC,IAAAA;AAAF,GAAP;AACD,CAvBD;;AAyBA,eAAeF,YAAf","sourcesContent":["\nimport { useState, useEffect } from 'react';\nimport { projectFirestore } from '../firebase/config';\n\nconst useFirestore = (collection) => {\n  const [docs, setDocs] = useState([]);\n\n  useEffect(() => {\n    const unsub = projectFirestore.collection(collection)\n      .orderBy('createdAt', 'desc')\n      .onSnapshot(snap => {\n        //* onsnapshot akkor triggerelődik amikor a collection-ben változás történik\n        let documents = [];\n        console.log(documents);\n        snap.forEach(doc => {\n\t\t\t\t\tdocuments.push({...doc.data(), id: doc.id});\n          //* egy dokumentum\n        });\n        setDocs(documents);\n      });\n\n    return () => unsub();\n    // this is a cleanup function that react will run when\n    // a component using the hook unmounts\n  }, [collection]);\n\n  return { docs };\n}\n\nexport default useFirestore;\n"]},"metadata":{},"sourceType":"module"}