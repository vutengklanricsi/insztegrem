{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport { projectStorage, projectFirestore, timestamp } from \"../firebase/config\";\n\nconst useStorage = file => {\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [url, setUrl] = useState(null);\n  var metadata = {\n    contentType: file.type\n  };\n  useEffect(file => {\n    const storageRef = projectStorage.ref(file.name);\n    const collectionRef = projectFirestore.collection('images');\n    var uploadTask = storageRef.child('images/' + file.name).put(file, metadata);\n    uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, // or 'state_changed'\n    function (snapshot) {\n      // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n      var percentage = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n      setProgress(percentage);\n    }, error => {\n      console.log(error);\n      setError(error);\n    }, () => {\n      uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL) {\n        collectionRef.add({\n          url: url,\n          createdAt: timestamp\n        });\n        setUrl(url);\n      });\n    });\n  }, [file]);\n  return {\n    progress,\n    error,\n    url\n  };\n}; //   useEffect(() => {\n//     const storageRef = projectStorage.ref(file.name);\n//     const collectionRef = projectFirestore.collection('images')\n//     storageRef.put(file).on(\"state_changed\",(snap) => {\n//       let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\n//       setProgress(percentage);\n//       }, (error) => {\n//         // console.log(error);\n//         setError(error);\n//       }, async () => {\n//         const url = await storageRef.getDownloadURL();\n//         collectionRef.add({url: url, createdAt: timestamp});\n//         setUrl(url);\n//       }\n//       // }, () => {\n//       //   // Upload completed successfully, now we can get the download URL\n//       //    const url = storageRef.getDownloadURL().then(function(downloadURL) {\n//       //     console.log('File available at', downloadURL);\n//       //     setUrl(url);\n//       //   });\n//       // }\n//     );\n//   }, [file]);\n//   return { progress, error, url };\n// };\n\n\nexport default useStorage; // const useStorage = (file) => {\n//   const [progress, setProgress] = useState(0);\n//   const [error, setError] = useState(null);\n//   const [url, setUrl] = useState(null);\n//   useEffect(() => {\n//     const storageRef = projectStorage.ref().child(file.name).put(file);\n//     const collectionRef = projectFirestore.collection('images')\n//     storageRef.on('state_change', function(snapshot) {\n//       var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//       console.log('Upload is ' + progress + '% done');\n//     }, (error) => {\n//         setError(error);\n//     }, () => {\n//       const url = storageRef.snapshot.ref.getDownloadURL()\n//       collectionRef.add({url: url, createdAt: timestamp});\n//       setUrl(url);\n//     })\n//   }, [file]);\n//     return { progress, error, url };\n//   };\n// export default useStorage","map":{"version":3,"sources":["/home/richard/coding/react/insztegrem/src/hooks/useStorage.js"],"names":["useState","useEffect","projectStorage","projectFirestore","timestamp","useStorage","file","progress","setProgress","error","setError","url","setUrl","metadata","contentType","type","storageRef","ref","name","collectionRef","collection","uploadTask","child","put","on","firebase","storage","TaskEvent","STATE_CHANGED","snapshot","percentage","bytesTransferred","totalBytes","console","log","getDownloadURL","then","downloadURL","add","createdAt"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,cAAT,EAAyBC,gBAAzB,EAA2CC,SAA3C,QAA4D,oBAA5D;;AAEA,MAAMC,UAAU,GAAIC,IAAD,IAAU;AAC3B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACW,GAAD,EAAMC,MAAN,IAAgBZ,QAAQ,CAAC,IAAD,CAA9B;AAEA,MAAIa,QAAQ,GAAG;AACbC,IAAAA,WAAW,EAAER,IAAI,CAACS;AADL,GAAf;AAIAd,EAAAA,SAAS,CAAEK,IAAD,IAAU;AAClB,UAAMU,UAAU,GAAGd,cAAc,CAACe,GAAf,CAAmBX,IAAI,CAACY,IAAxB,CAAnB;AACA,UAAMC,aAAa,GAAGhB,gBAAgB,CAACiB,UAAjB,CAA4B,QAA5B,CAAtB;AACA,QAAIC,UAAU,GAAGL,UAAU,CAACM,KAAX,CAAiB,YAAYhB,IAAI,CAACY,IAAlC,EAAwCK,GAAxC,CAA4CjB,IAA5C,EAAkDO,QAAlD,CAAjB;AAEAQ,IAAAA,UAAU,CAACG,EAAX,CAAcC,QAAQ,CAACC,OAAT,CAAiBC,SAAjB,CAA2BC,aAAzC,EAAwD;AACxD,cAASC,QAAT,EAAmB;AACnB;AACA,UAAIC,UAAU,GAAID,QAAQ,CAACE,gBAAT,GAA4BF,QAAQ,CAACG,UAAtC,GAAoD,GAArE;AACAxB,MAAAA,WAAW,CAACsB,UAAD,CAAX;AACC,KALD,EAKIrB,KAAD,IAAW;AACdwB,MAAAA,OAAO,CAACC,GAAR,CAAYzB,KAAZ;AACAC,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACC,KARD,EAQG,MAAM;AACPY,MAAAA,UAAU,CAACQ,QAAX,CAAoBZ,GAApB,CAAwBkB,cAAxB,GAAyCC,IAAzC,CAA8C,UAASC,WAAT,EAAsB;AAClElB,QAAAA,aAAa,CAACmB,GAAd,CAAkB;AAAC3B,UAAAA,GAAG,EAAEA,GAAN;AAAW4B,UAAAA,SAAS,EAAEnC;AAAtB,SAAlB;AACAQ,QAAAA,MAAM,CAACD,GAAD,CAAN;AACD,OAHD;AAID,KAbD;AAcD,GAnBQ,EAmBN,CAACL,IAAD,CAnBM,CAAT;AAoBA,SAAO;AAAEC,IAAAA,QAAF;AAAYE,IAAAA,KAAZ;AAAmBE,IAAAA;AAAnB,GAAP;AACD,CA9BD,C,CA+BA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,eAAeN,UAAf,C,CAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { projectStorage, projectFirestore, timestamp } from \"../firebase/config\";\n\nconst useStorage = (file) => {\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [url, setUrl] = useState(null);\n\n  var metadata = {\n    contentType: file.type,\n  };\n  \n  useEffect((file) => {\n    const storageRef = projectStorage.ref(file.name);\n    const collectionRef = projectFirestore.collection('images');\n    var uploadTask = storageRef.child('images/' + file.name).put(file, metadata);\n  \n    uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, // or 'state_changed'\n    function(snapshot) {\n    // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n    var percentage = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n    setProgress(percentage);\n    }, (error) => {\n    console.log(error);\n    setError(error);\n    }, () => {\n      uploadTask.snapshot.ref.getDownloadURL().then(function(downloadURL) {\n        collectionRef.add({url: url, createdAt: timestamp});\n        setUrl(url);\n      })\n    })\n  }, [file]);\n  return { progress, error, url };\n}\n//   useEffect(() => {\n//     const storageRef = projectStorage.ref(file.name);\n//     const collectionRef = projectFirestore.collection('images')\n\n//     storageRef.put(file).on(\"state_changed\",(snap) => {\n//       let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\n//       setProgress(percentage);\n//       }, (error) => {\n//         // console.log(error);\n//         setError(error);\n//       }, async () => {\n//         const url = await storageRef.getDownloadURL();\n//         collectionRef.add({url: url, createdAt: timestamp});\n//         setUrl(url);\n//       }\n//       // }, () => {\n//       //   // Upload completed successfully, now we can get the download URL\n//       //    const url = storageRef.getDownloadURL().then(function(downloadURL) {\n//       //     console.log('File available at', downloadURL);\n//       //     setUrl(url);\n//       //   });\n//       // }\n//     );\n//   }, [file]);\n//   return { progress, error, url };\n// };\n\n\nexport default useStorage;\n\n\n// const useStorage = (file) => {\n//   const [progress, setProgress] = useState(0);\n//   const [error, setError] = useState(null);\n//   const [url, setUrl] = useState(null);\n\n//   useEffect(() => {\n//     const storageRef = projectStorage.ref().child(file.name).put(file);\n//     const collectionRef = projectFirestore.collection('images')\n    \n//     storageRef.on('state_change', function(snapshot) {\n//       var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//       console.log('Upload is ' + progress + '% done');\n//     }, (error) => {\n//         setError(error);\n//     }, () => {\n//       const url = storageRef.snapshot.ref.getDownloadURL()\n//       collectionRef.add({url: url, createdAt: timestamp});\n//       setUrl(url);\n//     })\n//   }, [file]);\n//     return { progress, error, url };\n//   };\n\n// export default useStorage\n"]},"metadata":{},"sourceType":"module"}