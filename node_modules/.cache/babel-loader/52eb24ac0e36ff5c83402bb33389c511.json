{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport { projectStorage, projectFirestore, timestamp } from \"../firebase/config\";\n\nconst useStorage = file => {\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [url, setUrl] = useState(null); //   useEffect(() => {\n  //     const storageRef = projectStorage.ref(file.name);\n  //     const collectionRef = projectFirestore.collection('images');\n  //     var uploadTask = storageRef.child('images/' + file.name).put(file);\n  //     uploadTask.on('state_change', // or 'state_changed'\n  //     function(snapshot) {\n  //     // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n  //     var percentage = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n  //     setProgress(percentage);\n  //     }, (error) => {\n  //     console.log(error);\n  //     setError(error);\n  //     }, () => {\n  //       const url = uploadTask.snapshot.ref.getDownloadURL().then(function(downloadURL) {\n  //         collectionRef.add({url: url, createdAt: timestamp});\n  //         setUrl(url);\n  //       })\n  //     })\n  //   }, [file]);\n  //   return { progress, error, url };\n  // }\n\n  useEffect(() => {\n    const storageRef = projectStorage.ref(file.name);\n    const collectionRef = projectFirestore.collection('images');\n    storageRef.put(file).on(\"state_changed\", snap => {\n      let percentage = snap.bytesTransferred / snap.totalBytes * 100;\n      setProgress(percentage);\n    }, error => {\n      // console.log(error);\n      setError(error);\n    }, async () => {\n      const url = await storageRef.getDownloadURL();\n      collectionRef.add({\n        url: url,\n        createdAt: timestamp\n      });\n      setUrl(url);\n    } // }, () => {\n    //   // Upload completed successfully, now we can get the download URL\n    //    const url = storageRef.getDownloadURL().then(function(downloadURL) {\n    //     console.log('File available at', downloadURL);\n    //     setUrl(url);\n    //   });\n    // }\n    );\n  }, [file]);\n  return {\n    progress,\n    error,\n    url\n  };\n};\n\nexport default useStorage;","map":{"version":3,"sources":["/home/richard/coding/react/insztegrem/src/hooks/useStorage.js"],"names":["useState","useEffect","projectStorage","projectFirestore","timestamp","useStorage","file","progress","setProgress","error","setError","url","setUrl","storageRef","ref","name","collectionRef","collection","put","on","snap","percentage","bytesTransferred","totalBytes","getDownloadURL","add","createdAt"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,cAAT,EAAyBC,gBAAzB,EAA2CC,SAA3C,QAA4D,oBAA5D;;AAEA,MAAMC,UAAU,GAAIC,IAAD,IAAU;AAC3B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACW,GAAD,EAAMC,MAAN,IAAgBZ,QAAQ,CAAC,IAAD,CAA9B,CAH2B,CAK7B;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACEC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMY,UAAU,GAAGX,cAAc,CAACY,GAAf,CAAmBR,IAAI,CAACS,IAAxB,CAAnB;AACA,UAAMC,aAAa,GAAGb,gBAAgB,CAACc,UAAjB,CAA4B,QAA5B,CAAtB;AAEAJ,IAAAA,UAAU,CAACK,GAAX,CAAeZ,IAAf,EAAqBa,EAArB,CAAwB,eAAxB,EAAyCC,IAAD,IAAU;AAChD,UAAIC,UAAU,GAAID,IAAI,CAACE,gBAAL,GAAwBF,IAAI,CAACG,UAA9B,GAA4C,GAA7D;AACAf,MAAAA,WAAW,CAACa,UAAD,CAAX;AACC,KAHH,EAGMZ,KAAD,IAAW;AACZ;AACAC,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,KANH,EAMK,YAAY;AACb,YAAME,GAAG,GAAG,MAAME,UAAU,CAACW,cAAX,EAAlB;AACAR,MAAAA,aAAa,CAACS,GAAd,CAAkB;AAACd,QAAAA,GAAG,EAAEA,GAAN;AAAWe,QAAAA,SAAS,EAAEtB;AAAtB,OAAlB;AACAQ,MAAAA,MAAM,CAACD,GAAD,CAAN;AACD,KAVH,CAWE;AACA;AACA;AACA;AACA;AACA;AACA;AAjBF;AAmBD,GAvBQ,EAuBN,CAACL,IAAD,CAvBM,CAAT;AAwBA,SAAO;AAAEC,IAAAA,QAAF;AAAYE,IAAAA,KAAZ;AAAmBE,IAAAA;AAAnB,GAAP;AACD,CApDD;;AAuDA,eAAeN,UAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { projectStorage, projectFirestore, timestamp } from \"../firebase/config\";\n\nconst useStorage = (file) => {\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [url, setUrl] = useState(null);\n  \n//   useEffect(() => {\n//     const storageRef = projectStorage.ref(file.name);\n//     const collectionRef = projectFirestore.collection('images');\n//     var uploadTask = storageRef.child('images/' + file.name).put(file);\n  \n//     uploadTask.on('state_change', // or 'state_changed'\n//     function(snapshot) {\n//     // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n//     var percentage = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//     setProgress(percentage);\n//     }, (error) => {\n//     console.log(error);\n//     setError(error);\n//     }, () => {\n//       const url = uploadTask.snapshot.ref.getDownloadURL().then(function(downloadURL) {\n//         collectionRef.add({url: url, createdAt: timestamp});\n//         setUrl(url);\n//       })\n//     })\n//   }, [file]);\n//   return { progress, error, url };\n// }\n  useEffect(() => {\n    const storageRef = projectStorage.ref(file.name);\n    const collectionRef = projectFirestore.collection('images')\n\n    storageRef.put(file).on(\"state_changed\",(snap) => {\n      let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\n      setProgress(percentage);\n      }, (error) => {\n        // console.log(error);\n        setError(error);\n      }, async () => {\n        const url = await storageRef.getDownloadURL();\n        collectionRef.add({url: url, createdAt: timestamp});\n        setUrl(url);\n      }\n      // }, () => {\n      //   // Upload completed successfully, now we can get the download URL\n      //    const url = storageRef.getDownloadURL().then(function(downloadURL) {\n      //     console.log('File available at', downloadURL);\n      //     setUrl(url);\n      //   });\n      // }\n    );\n  }, [file]);\n  return { progress, error, url };\n};\n\n\nexport default useStorage;\n"]},"metadata":{},"sourceType":"module"}