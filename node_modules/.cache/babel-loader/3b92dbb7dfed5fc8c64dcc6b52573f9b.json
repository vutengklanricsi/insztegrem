{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport { projectFirestore } from \"../firebase/config\";\n\nconst useFirestore = collection => {\n  const [docs, setDocs] = useEffect([]);\n  useEffect(() => {\n    const unsub = projectFirestore.collection(collection).orderBy(\"createdAt\", \"desc\").onSnapshot(snap => {\n      //* onsnapshot akkor triggerelődik amikor a collection-ben változás történik\n      let documents = [];\n      snap.forEach(doc => {\n        documents.push({ ...doc.data(),\n          id: doc.id\n        }); //* egy dokumentum\n      });\n      setDocs(documents);\n    });\n    return () => unsub();\n  }, [collection]);\n  return {\n    docs\n  };\n};\n\nexport default useFirestore;","map":{"version":3,"sources":["/home/richard/coding/react/insztegrem/src/hooks/useFirestore.js"],"names":["useState","useEffect","projectFirestore","useFirestore","collection","docs","setDocs","unsub","orderBy","onSnapshot","snap","documents","forEach","doc","push","data","id"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,gBAAT,QAAiC,oBAAjC;;AAEA,MAAMC,YAAY,GAAIC,UAAD,IAAgB;AACpC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,SAAS,CAAC,EAAD,CAAjC;AAECA,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMM,KAAK,GAAGL,gBAAgB,CAACE,UAAjB,CAA4BA,UAA5B,EACXI,OADW,CACH,WADG,EACU,MADV,EAEXC,UAFW,CAEAC,IAAI,IAAI;AAClB;AACA,UAAIC,SAAS,GAAG,EAAhB;AACAD,MAAAA,IAAI,CAACE,OAAL,CAAcC,GAAD,IAAS;AACpBF,QAAAA,SAAS,CAACG,IAAV,CAAe,EAAE,GAAGD,GAAG,CAACE,IAAJ,EAAL;AAAiBC,UAAAA,EAAE,EAAEH,GAAG,CAACG;AAAzB,SAAf,EADoB,CAEpB;AACD,OAHD;AAIAV,MAAAA,OAAO,CAACK,SAAD,CAAP;AACD,KAVW,CAAd;AAWF,WAAO,MAAMJ,KAAK,EAAlB;AAEA,GAdS,EAcP,CAACH,UAAD,CAdO,CAAT;AAgBA,SAAO;AAAEC,IAAAA;AAAF,GAAP;AACD,CApBD;;AAsBA,eAAeF,YAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { projectFirestore } from \"../firebase/config\";\n\nconst useFirestore = (collection) => {\n\tconst [docs, setDocs] = useEffect([]);\n\n  useEffect(() => {\n    const unsub = projectFirestore.collection(collection)\n      .orderBy(\"createdAt\", \"desc\")\n      .onSnapshot(snap => {\n        //* onsnapshot akkor triggerelődik amikor a collection-ben változás történik\n        let documents = [];\n        snap.forEach((doc) => {\n          documents.push({ ...doc.data(), id: doc.id });\n          //* egy dokumentum\n        });\n        setDocs(documents);\n      });\n\t\treturn () => unsub();\n\n\t}, [collection]);\n\n  return { docs };\n};\n\nexport default useFirestore;\n"]},"metadata":{},"sourceType":"module"}