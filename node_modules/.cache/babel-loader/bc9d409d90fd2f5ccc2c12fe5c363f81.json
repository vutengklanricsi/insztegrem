{"ast":null,"code":"var _jsxFileName = \"/home/richard/coding/react/insztegrem/src/hooks/useStorage.js\";\nimport { useState, useEffect } from \"react\";\nimport { projectStorage, projectFirestore, timestamp } from \"../firebase/config\"; // const useStorage = (file) => {\n//   const [progress, setProgress] = useState(0);\n//   const [error, setError] = useState(null);\n//   const [url, setUrl] = useState(null);\n//   useEffect(() => {\n//     const storageRef = projectStorage.ref(file.name);\n//     const collectionRef = projectFirestore.collection('images')\n//     storageRef.put(file).on(\"state_changed\",(snap) => {\n//       let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\n//       setProgress(percentage);\n//       }, (error) => {\n//         setError(error);\n//       }, async () => {\n//         const url = await storageRef.getDownloadURL();\n//         collectionRef.add({url: url, createdAt: timestamp});\n//         setUrl(url);\n//       }\n//       // }, () => {\n//       //   // Upload completed successfully, now we can get the download URL\n//       //    const url = storageRef.getDownloadURL().then(function(downloadURL) {\n//       //     console.log('File available at', downloadURL);\n//       //     setUrl(url);\n//       //   });\n//       // }\n//     );\n//   }, [file]);\n//   return { progress, error, url };\n// };\n// export default useStorage;\n\nimport React from 'react';\n\nconst useStorage = file => {\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [url, setUrl] = useState(null);\n  useEffect(() => {\n    const storageRef = projectStorage.ref().child(file.name).put(file);\n    const collectionRef = projectFirestore.collection('images');\n    storageRef.on('state_change', function (snapshot) {\n      var progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n      console.log('Upload is ' + progress + '% done');\n    }, error => {\n      setError(error);\n    }, () => {\n      const url = storageRef.snapshot.ref.getDownloadURL().then(function (downloadURL) {\n        console.log('File available at', downloadURL);\n      }); // collectionRef.add({url: url, createdAt: timestamp});\n\n      setUrl(url);\n    });\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default useStorage;","map":{"version":3,"sources":["/home/richard/coding/react/insztegrem/src/hooks/useStorage.js"],"names":["useState","useEffect","projectStorage","projectFirestore","timestamp","React","useStorage","file","progress","setProgress","error","setError","url","setUrl","storageRef","ref","child","name","put","collectionRef","collection","on","snapshot","bytesTransferred","totalBytes","console","log","getDownloadURL","then","downloadURL"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,cAAT,EAAyBC,gBAAzB,EAA2CC,SAA3C,QAA4D,oBAA5D,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,UAAU,GAAIC,IAAD,IAAU;AAC3B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACY,GAAD,EAAMC,MAAN,IAAgBb,QAAQ,CAAC,IAAD,CAA9B;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,UAAU,GAAGZ,cAAc,CAACa,GAAf,GAAqBC,KAArB,CAA2BT,IAAI,CAACU,IAAhC,EAAsCC,GAAtC,CAA0CX,IAA1C,CAAnB;AACA,UAAMY,aAAa,GAAGhB,gBAAgB,CAACiB,UAAjB,CAA4B,QAA5B,CAAtB;AAEAN,IAAAA,UAAU,CAACO,EAAX,CAAc,cAAd,EAA8B,UAASC,QAAT,EAAmB;AAC/C,UAAId,QAAQ,GAAIc,QAAQ,CAACC,gBAAT,GAA4BD,QAAQ,CAACE,UAAtC,GAAoD,GAAnE;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAelB,QAAf,GAA0B,QAAtC;AACD,KAHD,EAGIE,KAAD,IAAW;AACVC,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACH,KALD,EAKG,MAAM;AACP,YAAME,GAAG,GAAGE,UAAU,CAACQ,QAAX,CAAoBP,GAApB,CAAwBY,cAAxB,GAAyCC,IAAzC,CAA8C,UAASC,WAAT,EAAsB;AAChFJ,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCG,WAAjC;AACC,OAFW,CAAZ,CADO,CAIP;;AACAhB,MAAAA,MAAM,CAACD,GAAD,CAAN;AACD,KAXD;AAaD,GAjBQ,CAAT;AAmBA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAKD,CA7BD;;AA+BA,eAAeN,UAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { projectStorage, projectFirestore, timestamp } from \"../firebase/config\";\n\n// const useStorage = (file) => {\n//   const [progress, setProgress] = useState(0);\n//   const [error, setError] = useState(null);\n//   const [url, setUrl] = useState(null);\n\n//   useEffect(() => {\n//     const storageRef = projectStorage.ref(file.name);\n//     const collectionRef = projectFirestore.collection('images')\n\n//     storageRef.put(file).on(\"state_changed\",(snap) => {\n//       let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\n//       setProgress(percentage);\n//       }, (error) => {\n//         setError(error);\n//       }, async () => {\n//         const url = await storageRef.getDownloadURL();\n//         collectionRef.add({url: url, createdAt: timestamp});\n//         setUrl(url);\n//       }\n//       // }, () => {\n//       //   // Upload completed successfully, now we can get the download URL\n//       //    const url = storageRef.getDownloadURL().then(function(downloadURL) {\n//       //     console.log('File available at', downloadURL);\n//       //     setUrl(url);\n//       //   });\n//       // }\n//     );\n//   }, [file]);\n//   return { progress, error, url };\n// };\n\n// export default useStorage;\n\nimport React from 'react'\n\nconst useStorage = (file) => {\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [url, setUrl] = useState(null);\n\n  useEffect(() => {\n    const storageRef = projectStorage.ref().child(file.name).put(file);\n    const collectionRef = projectFirestore.collection('images')\n    \n    storageRef.on('state_change', function(snapshot) {\n      var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n      console.log('Upload is ' + progress + '% done');\n    }, (error) => {\n        setError(error);\n    }, () => {\n      const url = storageRef.snapshot.ref.getDownloadURL().then(function(downloadURL) {\n      console.log('File available at', downloadURL);\n      });\n      // collectionRef.add({url: url, createdAt: timestamp});\n      setUrl(url);\n    }\n    )\n  })\n\n  return (\n    <div>\n      \n    </div>\n  )\n}\n\nexport default useStorage\n"]},"metadata":{},"sourceType":"module"}