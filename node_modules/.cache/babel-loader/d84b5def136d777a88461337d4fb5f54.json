{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport { projectFirestore } from \"../firebase/config\";\n\nconst useFirestore = collection => {\n  const [docs, setDocs] = useEffect(null);\n  useEffect(() => {\n    const unsub = projectFirestore.collection(collection).orderBy(\"createdAt\", \"desc\").onSnapshot(snap => {\n      //* onsnapshot akkor triggerelődik amikor a collection-ben változás történik\n      let documents = [];\n      snap.forEach(doc => {\n        documents.push({ ...doc.data(),\n          id: doc.id\n        }); //* egy dokumentum\n      });\n      setDocs(documents);\n    });\n    return () => {\n      unsub();\n    };\n  }, [collection]);\n  return {\n    docs\n  };\n};\n\nexport default useFirestore;","map":{"version":3,"sources":["/home/richard/coding/react/insztegrem/src/hooks/useFirestore.js"],"names":["useState","useEffect","projectFirestore","useFirestore","collection","docs","setDocs","unsub","orderBy","onSnapshot","snap","documents","forEach","doc","push","data","id"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,gBAAT,QAAiC,oBAAjC;;AAEA,MAAMC,YAAY,GAAIC,UAAD,IAAgB;AACnC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,SAAS,CAAC,IAAD,CAAjC;AAEAA,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMM,KAAK,GAAGL,gBAAgB,CAC3BE,UADW,CACAA,UADA,EAEXI,OAFW,CAEH,WAFG,EAEU,MAFV,EAGXC,UAHW,CAGCC,IAAD,IAAU;AACpB;AACA,UAAIC,SAAS,GAAG,EAAhB;AACAD,MAAAA,IAAI,CAACE,OAAL,CAAcC,GAAD,IAAS;AACpBF,QAAAA,SAAS,CAACG,IAAV,CAAe,EAAE,GAAGD,GAAG,CAACE,IAAJ,EAAL;AAAiBC,UAAAA,EAAE,EAAEH,GAAG,CAACG;AAAzB,SAAf,EADoB,CAEpB;AACD,OAHD;AAIAV,MAAAA,OAAO,CAACK,SAAD,CAAP;AACD,KAXW,CAAd;AAYA,WAAO,MAAM;AACXJ,MAAAA,KAAK;AACN,KAFD;AAGD,GAhBQ,EAgBN,CAACH,UAAD,CAhBM,CAAT;AAiBA,SAAO;AAAEC,IAAAA;AAAF,GAAP;AACD,CArBD;;AAuBA,eAAeF,YAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { projectFirestore } from \"../firebase/config\";\n\nconst useFirestore = (collection) => {\n  const [docs, setDocs] = useEffect(null);\n\n  useEffect(() => {\n    const unsub = projectFirestore\n      .collection(collection)\n      .orderBy(\"createdAt\", \"desc\")\n      .onSnapshot((snap) => {\n        //* onsnapshot akkor triggerelődik amikor a collection-ben változás történik\n        let documents = [];\n        snap.forEach((doc) => {\n          documents.push({ ...doc.data(), id: doc.id });\n          //* egy dokumentum\n        });\n        setDocs(documents);\n      });\n    return () => {\n      unsub()\n    };\n  }, [collection]);\n  return { docs };\n};\n\nexport default useFirestore;\n"]},"metadata":{},"sourceType":"module"}